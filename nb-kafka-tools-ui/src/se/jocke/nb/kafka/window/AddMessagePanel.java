package se.jocke.nb.kafka.window;

import java.awt.event.ActionEvent;
import java.lang.invoke.MethodHandles;
import static java.util.Optional.ofNullable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.EditorKit;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.text.CloneableEditorSupport;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import se.jocke.nb.kafka.client.NBKafkaProducer;
import se.jocke.nb.kafka.nodes.topics.KafkaTopic;

/**
 *
 * @author jocke
 */
public class AddMessagePanel extends javax.swing.JPanel {

    private static final Logger LOG = Logger.getLogger(MethodHandles.lookup().lookupClass().getName());

    private final KafkaTopic topic;
    
    private static final String MIME_TYPE = "text/x-javascript";

    /**
     * Creates new form AddMessagePanel
     */
    public AddMessagePanel(KafkaTopic topic) {
        super();
        this.topic = topic;
        initComponents();
        valueEditorPane.setContentType(MIME_TYPE);
        EditorKit kit = CloneableEditorSupport.getEditorKit(MIME_TYPE);
        valueEditorPane.setEditorKit(kit);
        valueEditorPane.getDocument().putProperty("mimeType", MIME_TYPE);
        valueEditorPane.setText("{}");
        topicLabel.setText(topic.getName());
    }

   
    public void showDialog() {
        DialogDescriptor descriptor = new DialogDescriptor(this, "Add record", true, this::onDialogDescriptorAction);
        DialogDisplayer.getDefault().notifyLater(descriptor);
    }

    public void onDialogDescriptorAction(ActionEvent event) {
        LOG.log(Level.INFO, "Action triggered with command {0}", event.getActionCommand());

        if ("OK".equalsIgnoreCase(event.getActionCommand())) {

            NBKafkaProducer producer = Lookup.getDefault().lookup(NBKafkaProducer.class);

            String key = ofNullable(keyTextField.getText()).orElse("");
            String value = ofNullable(valueEditorPane.getText()).orElse("");

            if (!value.isBlank()) {
                ProducerRecord<String, String> pr = new ProducerRecord<>(topic.getName(), key, value);
                producer.send(pr, (RecordMetadata rm, Exception ex) -> {
                    if (ex != null) {
                        Exceptions.printStackTrace(ex);
                    }
                });
            }

        } else if ("Cancel".equalsIgnoreCase(event.getActionCommand())) {
            LOG.log(Level.INFO, "Action Cancel triggered");

        } else {
            throw new AssertionError("Unknown command " + event.getActionCommand());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        valueEditorPane = new javax.swing.JEditorPane();
        jLabel1 = new javax.swing.JLabel();
        topicLabel = new javax.swing.JLabel();
        keyTextField = new javax.swing.JTextField();

        jScrollPane1.setViewportView(valueEditorPane);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AddMessagePanel.class, "AddMessagePanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(topicLabel, org.openide.util.NbBundle.getMessage(AddMessagePanel.class, "AddMessagePanel.topicLabel.text")); // NOI18N

        keyTextField.setText(org.openide.util.NbBundle.getMessage(AddMessagePanel.class, "AddMessagePanel.keyTextField.text")); // NOI18N
        keyTextField.setToolTipText(org.openide.util.NbBundle.getMessage(AddMessagePanel.class, "AddMessagePanel.keyTextField.toolTipText")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(keyTextField)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(topicLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(topicLabel))
                .addGap(18, 18, 18)
                .addComponent(keyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField keyTextField;
    private javax.swing.JLabel topicLabel;
    private javax.swing.JEditorPane valueEditorPane;
    // End of variables declaration//GEN-END:variables
}
